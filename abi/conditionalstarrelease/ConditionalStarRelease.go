// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package conditionalstarrelease

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ConditionalstarreleaseMetaData contains all meta data concerning the Conditionalstarrelease contract.
var ConditionalstarreleaseMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_batch\",\"type\":\"uint8\"}],\"name\":\"getWithdrawnFromBatch\",\"outputs\":[{\"name\":\"withdrawn\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"conditions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batch\",\"type\":\"uint8\"}],\"name\":\"withdrawToSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"transferCommitment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getForfeited\",\"outputs\":[{\"name\":\"forfeited\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_batch\",\"type\":\"uint8\"}],\"name\":\"getBatch\",\"outputs\":[{\"name\":\"batch\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getRemainingStars\",\"outputs\":[{\"name\":\"stars\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawOverdue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"livelines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"verifyBalance\",\"outputs\":[{\"name\":\"correct\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_batch\",\"type\":\"uint8\"}],\"name\":\"hasForfeitedBatch\",\"outputs\":[{\"name\":\"forfeited\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batch\",\"type\":\"uint8\"}],\"name\":\"forfeit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getWithdrawn\",\"outputs\":[{\"name\":\"withdrawn\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deadlines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_batch\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawForfeited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConditionsState\",\"outputs\":[{\"name\":\"conds\",\"type\":\"bytes32[]\"},{\"name\":\"lives\",\"type\":\"uint256[]\"},{\"name\":\"deads\",\"type\":\"uint256[]\"},{\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"approveCommitmentTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"azimuth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batch\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_condition\",\"type\":\"uint8\"}],\"name\":\"analyzeCondition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_batch\",\"type\":\"uint8\"}],\"name\":\"withdrawLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_batches\",\"type\":\"uint16[]\"},{\"name\":\"_rate\",\"type\":\"uint16\"},{\"name\":\"_rateUnit\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_star\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"name\":\"rateUnit\",\"type\":\"uint256\"},{\"name\":\"approvedTransferTo\",\"type\":\"address\"},{\"name\":\"total\",\"type\":\"uint16\"},{\"name\":\"rate\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getBatches\",\"outputs\":[{\"name\":\"batches\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_azimuth\",\"type\":\"address\"},{\"name\":\"_conditions\",\"type\":\"bytes32[]\"},{\"name\":\"_livelines\",\"type\":\"uint256[]\"},{\"name\":\"_deadlines\",\"type\":\"uint256[]\"},{\"name\":\"_escapeHatchDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"condition\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"ConditionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"batch\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"stars\",\"type\":\"uint16\"}],\"name\":\"Forfeit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620048f4380380620048f483398101806040528101908080519060200190929190805182019291906020018051820192919060200180518201929190602001805190602001909291905050508480336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505060008451118015620000fd5750600860ff16845111155b80156200010b575083518351145b801562000119575083518251145b8015620001615750816200014760018451620001f76401000000000262002e5c179091906401000000009004565b8151811015156200015457fe5b9060200190602002015181115b15156200016d57600080fd5b83600290805190602001906200018592919062000743565b5082600390805190602001906200019e9291906200079b565b508160049080519060200190620001b79291906200079b565b508351600581620001c99190620007ed565b5080600681905550620001ec600062000211640100000000026401000000009004565b50505050506200086c565b60008282111515156200020657fe5b818303905092915050565b600080600060058460ff168154811015156200022957fe5b906000526020600020015460001415156200024357600080fd5b60038460ff168154811015156200025657fe5b9060005260206000200154421115156200026f57600080fd5b60048460ff168154811015156200028257fe5b9060005260206000200154925082421115620002fb578260058560ff16815481101515620002ac57fe5b90600052602060002001819055508360ff167f78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413846040518082815260200191505060405180910390a26200073d565b60028460ff168154811015156200030e57fe5b906000526020600020015491506000905081600019166000600102600019161415620004bb57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620003bb57600080fd5b505af1158015620003d0573d6000803e3d6000fd5b505050506040513d6020811015620003e757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663ed969f686040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200045c57600080fd5b505af115801562000471573d6000803e3d6000fd5b505050506040513d60208110156200048857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600014159050620006d7565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200054257600080fd5b505af115801562000557573d6000803e3d6000fd5b505050506040513d60208110156200056e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663e64853c46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620005e357600080fd5b505af1158015620005f8573d6000803e3d6000fd5b505050506040513d60208110156200060f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663834e3822836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156200069757600080fd5b505af1158015620006ac573d6000803e3d6000fd5b505050506040513d6020811015620006c357600080fd5b810190808051906020019092919050505090505b80156200073c574260058560ff16815481101515620006f257fe5b90600052602060002001819055508360ff167f78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413426040518082815260200191505060405180910390a25b5b50505050565b82805482825590600052602060002090810192821562000788579160200282015b828111156200078757825182906000191690559160200191906001019062000764565b5b5090506200079791906200081c565b5090565b828054828255906000526020600020908101928215620007da579160200282015b82811115620007d9578251825591602001919060010190620007bc565b5b509050620007e9919062000844565b5090565b815481835581811115620008175781836000526020600020918201910162000816919062000844565b5b505050565b6200084191905b808211156200083d57600081600090555060010162000823565b5090565b90565b6200086991905b80821115620008655760008160009055506001016200084b565b5090565b90565b614078806200087c6000396000f300608060405260043610610180576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063206d01251461018557806326c50007146101f15780632cbb827f1461023a578063339ff96d1461026a5780634965fc89146102ad57806350060f3414610345578063715018a6146103b157806377bffc9a146103c857806378f04a7a146104605780638bc33af31461048b5780638da5cb5b146104cc5780639882e15e146105235780639fecff0d14610586578063a00ddad1146105c7578063a18f43ef14610622578063aa3662901461068a578063ae66d948146106ba578063b025cc4514610752578063c283243014610793578063c59f3a7c14610803578063d1555f1f14610947578063d40ffacb1461098a578063dd6ad764146109e1578063df6b1ebb14610a31578063e037a71c14610a61578063e182914e14610acd578063e6deefa914610b40578063e8fcf72314610b91578063f2fde38b14610c39578063f8185a1314610c7c575b600080fd5b34801561019157600080fd5b506101d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050610d14565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156101fd57600080fd5b5061021c60048036038101908080359060200190929190505050610d94565b60405180826000191660001916815260200191505060405180910390f35b34801561024657600080fd5b50610268600480360381019080803560ff169060200190929190505050610db7565b005b34801561027657600080fd5b506102ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dc4565b005b3480156102b957600080fd5b506102ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611157565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610331578082015181840152602081019050610316565b505050509050019250505060405180910390f35b34801561035157600080fd5b50610393600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050611216565b604051808261ffff1661ffff16815260200191505060405180910390f35b3480156103bd57600080fd5b506103c6611296565b005b3480156103d457600080fd5b50610409600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611398565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561044c578082015181840152602081019050610431565b505050509050019250505060405180910390f35b34801561046c57600080fd5b5061047561145a565b6040518082815260200191505060405180910390f35b34801561049757600080fd5b506104b660048036038101908080359060200190929190505050611460565b6040518082815260200191505060405180910390f35b3480156104d857600080fd5b506104e1611483565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052f57600080fd5b50610584600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a8565b005b34801561059257600080fd5b506105b16004803603810190808035906020019092919050505061157d565b6040518082815260200191505060405180910390f35b3480156105d357600080fd5b50610608600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a0565b604051808215151515815260200191505060405180910390f35b34801561062e57600080fd5b50610670600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291905050506116a4565b604051808215151515815260200191505060405180910390f35b34801561069657600080fd5b506106b8600480360381019080803560ff169060200190929190505050611720565b005b3480156106c657600080fd5b506106fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611930565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561073e578082015181840152602081019050610723565b505050509050019250505060405180910390f35b34801561075e57600080fd5b5061077d600480360381019080803590602001909291905050506119f2565b6040518082815260200191505060405180910390f35b34801561079f57600080fd5b50610801600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a15565b005b34801561080f57600080fd5b50610818611c2a565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561086757808201518184015260208101905061084c565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156108a957808201518184015260208101905061088e565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156108eb5780820151818401526020810190506108d0565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561092d578082015181840152602081019050610912565b505050509050019850505050505050505060405180910390f35b34801561095357600080fd5b50610988600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d92565b005b34801561099657600080fd5b5061099f611eda565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109ed57600080fd5b50610a2f600480360381019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f00565b005b348015610a3d57600080fd5b50610a5f600480360381019080803560ff16906020019092919050505061208c565b005b348015610a6d57600080fd5b50610aaf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291905050506125a2565b604051808261ffff1661ffff16815260200191505060405180910390f35b348015610ad957600080fd5b50610b3e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390803561ffff169060200190929190803590602001909291905050506127c8565b005b348015610b4c57600080fd5b50610b8f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff1690602001909291905050506129ac565b005b348015610b9d57600080fd5b50610bd2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b8b565b604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018361ffff1661ffff1681526020018261ffff1661ffff16815260200194505050505060405180910390f35b348015610c4557600080fd5b50610c7a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bf7565b005b348015610c8857600080fd5b50610cbd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c5e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610d00578082015181840152602081019050610ce5565b505050509050019250505060405180910390f35b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018260ff16815481101515610d6857fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff16905092915050565b600281815481101515610da357fe5b906000526020600020016000915090505481565b610dc18133611f00565b50565b60003373ffffffffffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610e6257600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900461ffff1661ffff166000141515610ec557600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820181600001908054610f5c929190613d94565b506001820181600101908054610f73929190613d94565b506002820181600201908054610f8a929190613d94565b506003820181600301908054610fa1929190613df4565b50600482015481600401556005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005820160149054906101000a900461ffff168160050160146101000a81548161ffff021916908361ffff1602179055506005820160169054906101000a900461ffff168160050160166101000a81548161ffff021916908361ffff160217905550905050600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006110c89190613e54565b6001820160006110d89190613e54565b6002820160006110e89190613e54565b6003820160006110f89190613e7c565b60048201600090556005820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160146101000a81549061ffff02191690556005820160166101000a81549061ffff021916905550505050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561120a57602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116111d45790505b50505050509050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018260ff1681548110151561126a57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112f157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561144e57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116114155790505b50505050509050919050565b60065481565b60058181548110151561146f57fe5b906000526020600020016000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561150557600080fd5b6006544211151561151557600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000180549050600010151561156c57600080fd5b61157881836000612d20565b505050565b60038181548110151561158c57fe5b906000526020600020016000915090505481565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061168f61166a8260020180548060200260200160405190810160405280929190818152602001828054801561166057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116116275790505b5050505050612dbe565b8260050160149054906101000a900461ffff1661ffff16612e1590919063ffffffff16565b61ffff16816000018054905014915050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018260ff168154811015156116f857fe5b90600052602060002090602091828204019190069054906101000a900460ff16905092915050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160149054906101000a900461ffff1661ffff16600010151561178857600080fd5b60058260ff1681548110151561179a57fe5b906000526020600020015460048360ff168154811015156117b757fe5b906000526020600020015414801561180a5750806002018260ff168154811015156117de57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff166000145b80156118475750806003018260ff1681548110151561182557fe5b90600052602060002090602091828204019190069054906101000a900460ff16155b151561185257600080fd5b6001816003018360ff1681548110151561186857fe5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f56c9e0779f8410252ac7271778bfca64f4e74461b51d7abe02e74f80ac30abaa83836001018560ff168154811015156118de57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff16604051808360ff1660ff1681526020018261ffff1661ffff1681526020019250505060405180910390a25050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054806020026020016040519081016040528092919081815260200182805480156119e657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116119ad5790505b50505050509050919050565b600481815481101515611a0157fe5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a7257600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806003018360ff16815481101515611ac757fe5b90600052602060002090602091828204019190069054906101000a900460ff168015611b685750806001018360ff16815481101515611b0257fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16816002018460ff16815481101515611b3e57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16105b8015611b7b575080600001805490506000105b1515611b8657600080fd5b611bd56001826002018560ff16815481101515611b9f57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16612e3690919063ffffffff16565b816002018460ff16815481101515611be957fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550611c2481836000612d20565b50505050565b606080606080600260036004600583805480602002602001604051908101604052809291908181526020018280548015611c8757602002820191906000526020600020905b81546000191681526020019060010190808311611c6f575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015611cd957602002820191906000526020600020905b815481526020019060010190808311611cc5575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015611d2b57602002820191906000526020600020905b815481526020019060010190808311611d17575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611d7d57602002820191906000526020600020905b815481526020019060010190808311611d69575b50505050509050935093509350935090919293565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900461ffff1661ffff16600014158015611e4b5750600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160149054906101000a900461ffff1661ffff166000145b1515611e5657600080fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000180549050118015611fa15750611f5f33846125a2565b61ffff16816002018460ff16815481101515611f7757fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16105b8015611fde5750806003018360ff16815481101515611fbc57fe5b90600052602060002090602091828204019190069054906101000a900460ff16155b1515611fe957600080fd5b6120386001826002018560ff1681548110151561200257fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16612e3690919063ffffffff16565b816002018460ff1681548110151561204c57fe5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff16021790555061208781836001612d20565b505050565b600080600060058460ff168154811015156120a357fe5b906000526020600020015460001415156120bc57600080fd5b60038460ff168154811015156120ce57fe5b9060005260206000200154421115156120e657600080fd5b60048460ff168154811015156120f857fe5b906000526020600020015492508242111561216e578260058560ff1681548110151561212057fe5b90600052602060002001819055508360ff167f78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413846040518082815260200191505060405180910390a261259c565b60028460ff1681548110151561218057fe5b90600052602060002001549150600090508160001916600060010260001916141561232557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561222b57600080fd5b505af115801561223f573d6000803e3d6000fd5b505050506040513d602081101561225557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663ed969f686040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156122c957600080fd5b505af11580156122dd573d6000803e3d6000fd5b505050506040513d60208110156122f357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600014159050612538565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123ab57600080fd5b505af11580156123bf573d6000803e3d6000fd5b505050506040513d60208110156123d557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663e64853c46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561244957600080fd5b505af115801561245d573d6000803e3d6000fd5b505050506040513d602081101561247357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663834e3822836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156124fa57600080fd5b505af115801561250e573d6000803e3d6000fd5b505050506040513d602081101561252457600080fd5b810190808051906020019092919050505090505b801561259b574260058560ff1681548110151561255157fe5b90600052602060002001819055508360ff167f78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413426040518082815260200191505060405180910390a25b5b50505050565b600080600080600080600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002094508460050160149054906101000a900461ffff1661ffff166000141561261457600095506127bd565b60058760ff1681548110151561262657fe5b9060005260206000200154935060008414156126455760009550612723565b42841115151561265157fe5b61269b856004015461266c8642612e5c90919063ffffffff16565b81151561267557fe5b048660050160169054906101000a900461ffff1661ffff16612e7590919063ffffffff16565b9250846001018760ff168154811015156126b157fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1683111561271f57846001018760ff168154811015156126f457fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1692505b8295505b60018661ffff1610156127b95760009150600090505b8660ff168160ff161115156127a957846001018160ff1681548110151561275c57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff166000101561279c578660ff168160ff161491506127a9565b8080600101915050612739565b81156127b857600195506127bd565b5b8595505b505050505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561282657600080fd5b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091508160050160149054906101000a900461ffff1661ffff16600014151561288c57600080fd5b600280549050868690501415156128a257600080fd5b60008461ffff161180156128b65750600083115b15156128c157600080fd5b6128f9868680806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050612dbe565b905060008161ffff16118015612915575061ff008161ffff1611155b151561292057600080fd5b8585836001019190612933929190613ea4565b50808260050160146101000a81548161ffff021916908361ffff1602179055508585905082600201816129669190613f52565b5085859050826003018161297a9190613f8c565b50838260050160166101000a81548161ffff021916908361ffff16021790555082826004018190555050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a0957600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060ff8261ffff16118015612b125750612b04612adf82600201805480602002602001604051908101604052809291908181526020018280548015612ad557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411612a9c5790505b5050505050612dbe565b8260050160149054906101000a900461ffff1661ffff16612e1590919063ffffffff16565b61ffff168160000180549050105b1515612b1d57600080fd5b612b2c8261ffff166001612ead565b1515612b3757600080fd5b8060000182908060018154018082558091505090600182039060005260206000209060109182820401919006600202909192909190916101000a81548161ffff021916908361ffff16021790555050505050565b60076020528060005260406000206000915090508060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900461ffff16908060050160169054906101000a900461ffff16905084565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c5257600080fd5b612c5b816139df565b50565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015612d1457602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411612cdb5790505b50505050509050919050565b600083600001612d4160018660000180549050612e5c90919063ffffffff16565b815481101515612d4d57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050612d8e60018560000180549050612e5c90919063ffffffff16565b8460000181612d9d9190613f52565b50612dad8161ffff168484613ad9565b1515612db857600080fd5b50505050565b600080600090505b8251811015612e0c57612dfd8382815181101515612de057fe5b906020019060200201518361ffff16612e3690919063ffffffff16565b91508080600101915050612dc6565b81915050919050565b60008261ffff168261ffff1611151515612e2b57fe5b818303905092915050565b60008082840190508361ffff168161ffff1610151515612e5257fe5b8091505092915050565b6000828211151515612e6a57fe5b818303905092915050565b600080831415612e885760009050612ea7565b8183029050818382811515612e9957fe5b04141515612ea357fe5b8090505b92915050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f3857600080fd5b505af1158015612f4c573d6000803e3d6000fd5b505050506040513d6020811015612f6257600080fd5b81019080805190602001909291905050509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4a358d7866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808263ffffffff1663ffffffff168152602001915050602060405180830381600087803b15801561301257600080fd5b505af1158015613026573d6000803e3d6000fd5b505050506040513d602081101561303c57600080fd5b81019080805190602001909291905050509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caf590f98660006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561310b57600080fd5b505af115801561311f573d6000803e3d6000fd5b505050506040513d602081101561313557600080fd5b810190808051906020019092919050505080156132585750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caf590f982336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808361ffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561321c57600080fd5b505af1158015613230573d6000803e3d6000fd5b505050506040513d602081101561324657600080fd5b81019080805190602001909291905050505b801561336a5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324ba1a4682306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808361ffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561332e57600080fd5b505af1158015613342573d6000803e3d6000fd5b505050506040513d602081101561335857600080fd5b81019080805190602001909291905050505b80156135115750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663293a9169826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808261ffff1663ffffffff168152602001915050602060405180830381600087803b15801561340c57600080fd5b505af1158015613420573d6000803e3d6000fd5b505050506040513d602081101561343657600080fd5b810190808051906020019092919050505063ffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ef20bff883426040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808361ffff1663ffffffff16815260200182815260200192505050602060405180830381600087803b1580156134ce57600080fd5b505af11580156134e2573d6000803e3d6000fd5b505050506040513d60208110156134f857600080fd5b810190808051906020019092919050505063ffffffff16115b156135e6578173ffffffffffffffffffffffffffffffffffffffff1663a0d3253f86306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156135c557600080fd5b505af11580156135d9573d6000803e3d6000fd5b50505050600192506139d7565b8315806136c85750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d09887b866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808263ffffffff1663ffffffff168152602001915050602060405180830381600087803b15801561368b57600080fd5b505af115801561369f573d6000803e3d6000fd5b505050506040513d60208110156136b557600080fd5b8101908080519060200190929190505050155b80156137dc5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caf590f986336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156137a057600080fd5b505af11580156137b4573d6000803e3d6000fd5b505050506040513d60208110156137ca57600080fd5b81019080805190602001909291905050505b80156138f05750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663728aa85786306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156138b457600080fd5b505af11580156138c8573d6000803e3d6000fd5b505050506040513d60208110156138de57600080fd5b81019080805190602001909291905050505b156139d2578173ffffffffffffffffffffffffffffffffffffffff16631e79a85b863060016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808463ffffffff1663ffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019350505050600060405180830381600087803b1580156139b157600080fd5b505af11580156139c5573d6000803e3d6000fd5b50505050600192506139d7565b600092505b505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613a1b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caf590f985306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015613bac57600080fd5b505af1158015613bc0573d6000803e3d6000fd5b505050506040513d6020811015613bd657600080fd5b810190808051906020019092919050505015613d8857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613c7257600080fd5b505af1158015613c86573d6000803e3d6000fd5b505050506040513d6020811015613c9c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16631e79a85b8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808463ffffffff1663ffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019350505050600060405180830381600087803b158015613d6757600080fd5b505af1158015613d7b573d6000803e3d6000fd5b5050505060019050613d8d565b600090505b9392505050565b82805482825590600052602060002090600f01601090048101928215613de357600052602060002091600f016010900482015b82811115613de2578254825591600101919060010190613dc7565b5b509050613df09190613fc6565b5090565b82805482825590600052602060002090601f01602090048101928215613e4357600052602060002091601f016020900482015b82811115613e42578254825591600101919060010190613e27565b5b509050613e509190613ff7565b5090565b50805460008255600f016010900490600052602060002090810190613e799190614027565b50565b50805460008255601f016020900490600052602060002090810190613ea19190614027565b50565b82805482825590600052602060002090600f01601090048101928215613f415791602002820160005b83821115613f1157833561ffff1683826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613ecd565b8015613f3f5782816101000a81549061ffff0219169055600201602081600101049283019260010302613f11565b505b509050613f4e9190613fc6565b5090565b815481835581811115613f8757600f016010900481600f01601090048360005260206000209182019101613f869190614027565b5b505050565b815481835581811115613fc157601f016020900481601f01602090048360005260206000209182019101613fc09190614027565b5b505050565b613ff491905b80821115613ff057600081816101000a81549061ffff021916905550600101613fcc565b5090565b90565b61402491905b8082111561402057600081816101000a81549060ff021916905550600101613ffd565b5090565b90565b61404991905b8082111561404557600081600090555060010161402d565b5090565b905600a165627a7a723058206ccfeb4ab2db14955875acf70f5ba1136559ff8e3a57b711e250376dd31fee170029",
}

// ConditionalstarreleaseABI is the input ABI used to generate the binding from.
// Deprecated: Use ConditionalstarreleaseMetaData.ABI instead.
var ConditionalstarreleaseABI = ConditionalstarreleaseMetaData.ABI

// ConditionalstarreleaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ConditionalstarreleaseMetaData.Bin instead.
var ConditionalstarreleaseBin = ConditionalstarreleaseMetaData.Bin

// DeployConditionalstarrelease deploys a new Ethereum contract, binding an instance of Conditionalstarrelease to it.
func DeployConditionalstarrelease(auth *bind.TransactOpts, backend bind.ContractBackend, _azimuth common.Address, _conditions [][32]byte, _livelines []*big.Int, _deadlines []*big.Int, _escapeHatchDate *big.Int) (common.Address, *types.Transaction, *Conditionalstarrelease, error) {
	parsed, err := ConditionalstarreleaseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ConditionalstarreleaseBin), backend, _azimuth, _conditions, _livelines, _deadlines, _escapeHatchDate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Conditionalstarrelease{ConditionalstarreleaseCaller: ConditionalstarreleaseCaller{contract: contract}, ConditionalstarreleaseTransactor: ConditionalstarreleaseTransactor{contract: contract}, ConditionalstarreleaseFilterer: ConditionalstarreleaseFilterer{contract: contract}}, nil
}

// Conditionalstarrelease is an auto generated Go binding around an Ethereum contract.
type Conditionalstarrelease struct {
	ConditionalstarreleaseCaller     // Read-only binding to the contract
	ConditionalstarreleaseTransactor // Write-only binding to the contract
	ConditionalstarreleaseFilterer   // Log filterer for contract events
}

// ConditionalstarreleaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type ConditionalstarreleaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConditionalstarreleaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ConditionalstarreleaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConditionalstarreleaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ConditionalstarreleaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ConditionalstarreleaseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ConditionalstarreleaseSession struct {
	Contract     *Conditionalstarrelease // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ConditionalstarreleaseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ConditionalstarreleaseCallerSession struct {
	Contract *ConditionalstarreleaseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// ConditionalstarreleaseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ConditionalstarreleaseTransactorSession struct {
	Contract     *ConditionalstarreleaseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// ConditionalstarreleaseRaw is an auto generated low-level Go binding around an Ethereum contract.
type ConditionalstarreleaseRaw struct {
	Contract *Conditionalstarrelease // Generic contract binding to access the raw methods on
}

// ConditionalstarreleaseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ConditionalstarreleaseCallerRaw struct {
	Contract *ConditionalstarreleaseCaller // Generic read-only contract binding to access the raw methods on
}

// ConditionalstarreleaseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ConditionalstarreleaseTransactorRaw struct {
	Contract *ConditionalstarreleaseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewConditionalstarrelease creates a new instance of Conditionalstarrelease, bound to a specific deployed contract.
func NewConditionalstarrelease(address common.Address, backend bind.ContractBackend) (*Conditionalstarrelease, error) {
	contract, err := bindConditionalstarrelease(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Conditionalstarrelease{ConditionalstarreleaseCaller: ConditionalstarreleaseCaller{contract: contract}, ConditionalstarreleaseTransactor: ConditionalstarreleaseTransactor{contract: contract}, ConditionalstarreleaseFilterer: ConditionalstarreleaseFilterer{contract: contract}}, nil
}

// NewConditionalstarreleaseCaller creates a new read-only instance of Conditionalstarrelease, bound to a specific deployed contract.
func NewConditionalstarreleaseCaller(address common.Address, caller bind.ContractCaller) (*ConditionalstarreleaseCaller, error) {
	contract, err := bindConditionalstarrelease(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseCaller{contract: contract}, nil
}

// NewConditionalstarreleaseTransactor creates a new write-only instance of Conditionalstarrelease, bound to a specific deployed contract.
func NewConditionalstarreleaseTransactor(address common.Address, transactor bind.ContractTransactor) (*ConditionalstarreleaseTransactor, error) {
	contract, err := bindConditionalstarrelease(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseTransactor{contract: contract}, nil
}

// NewConditionalstarreleaseFilterer creates a new log filterer instance of Conditionalstarrelease, bound to a specific deployed contract.
func NewConditionalstarreleaseFilterer(address common.Address, filterer bind.ContractFilterer) (*ConditionalstarreleaseFilterer, error) {
	contract, err := bindConditionalstarrelease(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseFilterer{contract: contract}, nil
}

// bindConditionalstarrelease binds a generic wrapper to an already deployed contract.
func bindConditionalstarrelease(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ConditionalstarreleaseMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Conditionalstarrelease *ConditionalstarreleaseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Conditionalstarrelease.Contract.ConditionalstarreleaseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Conditionalstarrelease *ConditionalstarreleaseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.ConditionalstarreleaseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Conditionalstarrelease *ConditionalstarreleaseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.ConditionalstarreleaseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Conditionalstarrelease *ConditionalstarreleaseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Conditionalstarrelease.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.contract.Transact(opts, method, params...)
}

// Azimuth is a free data retrieval call binding the contract method 0xd40ffacb.
//
// Solidity: function azimuth() view returns(address)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Azimuth(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "azimuth")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Azimuth is a free data retrieval call binding the contract method 0xd40ffacb.
//
// Solidity: function azimuth() view returns(address)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Azimuth() (common.Address, error) {
	return _Conditionalstarrelease.Contract.Azimuth(&_Conditionalstarrelease.CallOpts)
}

// Azimuth is a free data retrieval call binding the contract method 0xd40ffacb.
//
// Solidity: function azimuth() view returns(address)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Azimuth() (common.Address, error) {
	return _Conditionalstarrelease.Contract.Azimuth(&_Conditionalstarrelease.CallOpts)
}

// Commitments is a free data retrieval call binding the contract method 0xe8fcf723.
//
// Solidity: function commitments(address ) view returns(uint256 rateUnit, address approvedTransferTo, uint16 total, uint16 rate)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Commitments(opts *bind.CallOpts, arg0 common.Address) (struct {
	RateUnit           *big.Int
	ApprovedTransferTo common.Address
	Total              uint16
	Rate               uint16
}, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "commitments", arg0)

	outstruct := new(struct {
		RateUnit           *big.Int
		ApprovedTransferTo common.Address
		Total              uint16
		Rate               uint16
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RateUnit = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ApprovedTransferTo = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Total = *abi.ConvertType(out[2], new(uint16)).(*uint16)
	outstruct.Rate = *abi.ConvertType(out[3], new(uint16)).(*uint16)

	return *outstruct, err

}

// Commitments is a free data retrieval call binding the contract method 0xe8fcf723.
//
// Solidity: function commitments(address ) view returns(uint256 rateUnit, address approvedTransferTo, uint16 total, uint16 rate)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Commitments(arg0 common.Address) (struct {
	RateUnit           *big.Int
	ApprovedTransferTo common.Address
	Total              uint16
	Rate               uint16
}, error) {
	return _Conditionalstarrelease.Contract.Commitments(&_Conditionalstarrelease.CallOpts, arg0)
}

// Commitments is a free data retrieval call binding the contract method 0xe8fcf723.
//
// Solidity: function commitments(address ) view returns(uint256 rateUnit, address approvedTransferTo, uint16 total, uint16 rate)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Commitments(arg0 common.Address) (struct {
	RateUnit           *big.Int
	ApprovedTransferTo common.Address
	Total              uint16
	Rate               uint16
}, error) {
	return _Conditionalstarrelease.Contract.Commitments(&_Conditionalstarrelease.CallOpts, arg0)
}

// Conditions is a free data retrieval call binding the contract method 0x26c50007.
//
// Solidity: function conditions(uint256 ) view returns(bytes32)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Conditions(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "conditions", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Conditions is a free data retrieval call binding the contract method 0x26c50007.
//
// Solidity: function conditions(uint256 ) view returns(bytes32)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Conditions(arg0 *big.Int) ([32]byte, error) {
	return _Conditionalstarrelease.Contract.Conditions(&_Conditionalstarrelease.CallOpts, arg0)
}

// Conditions is a free data retrieval call binding the contract method 0x26c50007.
//
// Solidity: function conditions(uint256 ) view returns(bytes32)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Conditions(arg0 *big.Int) ([32]byte, error) {
	return _Conditionalstarrelease.Contract.Conditions(&_Conditionalstarrelease.CallOpts, arg0)
}

// Deadlines is a free data retrieval call binding the contract method 0xb025cc45.
//
// Solidity: function deadlines(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Deadlines(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "deadlines", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Deadlines is a free data retrieval call binding the contract method 0xb025cc45.
//
// Solidity: function deadlines(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Deadlines(arg0 *big.Int) (*big.Int, error) {
	return _Conditionalstarrelease.Contract.Deadlines(&_Conditionalstarrelease.CallOpts, arg0)
}

// Deadlines is a free data retrieval call binding the contract method 0xb025cc45.
//
// Solidity: function deadlines(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Deadlines(arg0 *big.Int) (*big.Int, error) {
	return _Conditionalstarrelease.Contract.Deadlines(&_Conditionalstarrelease.CallOpts, arg0)
}

// EscapeHatchDate is a free data retrieval call binding the contract method 0x78f04a7a.
//
// Solidity: function escapeHatchDate() view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) EscapeHatchDate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "escapeHatchDate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EscapeHatchDate is a free data retrieval call binding the contract method 0x78f04a7a.
//
// Solidity: function escapeHatchDate() view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) EscapeHatchDate() (*big.Int, error) {
	return _Conditionalstarrelease.Contract.EscapeHatchDate(&_Conditionalstarrelease.CallOpts)
}

// EscapeHatchDate is a free data retrieval call binding the contract method 0x78f04a7a.
//
// Solidity: function escapeHatchDate() view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) EscapeHatchDate() (*big.Int, error) {
	return _Conditionalstarrelease.Contract.EscapeHatchDate(&_Conditionalstarrelease.CallOpts)
}

// GetBatch is a free data retrieval call binding the contract method 0x50060f34.
//
// Solidity: function getBatch(address _participant, uint8 _batch) view returns(uint16 batch)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetBatch(opts *bind.CallOpts, _participant common.Address, _batch uint8) (uint16, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getBatch", _participant, _batch)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetBatch is a free data retrieval call binding the contract method 0x50060f34.
//
// Solidity: function getBatch(address _participant, uint8 _batch) view returns(uint16 batch)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetBatch(_participant common.Address, _batch uint8) (uint16, error) {
	return _Conditionalstarrelease.Contract.GetBatch(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// GetBatch is a free data retrieval call binding the contract method 0x50060f34.
//
// Solidity: function getBatch(address _participant, uint8 _batch) view returns(uint16 batch)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetBatch(_participant common.Address, _batch uint8) (uint16, error) {
	return _Conditionalstarrelease.Contract.GetBatch(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// GetBatches is a free data retrieval call binding the contract method 0xf8185a13.
//
// Solidity: function getBatches(address _participant) view returns(uint16[] batches)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetBatches(opts *bind.CallOpts, _participant common.Address) ([]uint16, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getBatches", _participant)

	if err != nil {
		return *new([]uint16), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint16)).(*[]uint16)

	return out0, err

}

// GetBatches is a free data retrieval call binding the contract method 0xf8185a13.
//
// Solidity: function getBatches(address _participant) view returns(uint16[] batches)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetBatches(_participant common.Address) ([]uint16, error) {
	return _Conditionalstarrelease.Contract.GetBatches(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetBatches is a free data retrieval call binding the contract method 0xf8185a13.
//
// Solidity: function getBatches(address _participant) view returns(uint16[] batches)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetBatches(_participant common.Address) ([]uint16, error) {
	return _Conditionalstarrelease.Contract.GetBatches(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetConditionsState is a free data retrieval call binding the contract method 0xc59f3a7c.
//
// Solidity: function getConditionsState() view returns(bytes32[] conds, uint256[] lives, uint256[] deads, uint256[] times)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetConditionsState(opts *bind.CallOpts) (struct {
	Conds [][32]byte
	Lives []*big.Int
	Deads []*big.Int
	Times []*big.Int
}, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getConditionsState")

	outstruct := new(struct {
		Conds [][32]byte
		Lives []*big.Int
		Deads []*big.Int
		Times []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Conds = *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)
	outstruct.Lives = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Deads = *abi.ConvertType(out[2], new([]*big.Int)).(*[]*big.Int)
	outstruct.Times = *abi.ConvertType(out[3], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetConditionsState is a free data retrieval call binding the contract method 0xc59f3a7c.
//
// Solidity: function getConditionsState() view returns(bytes32[] conds, uint256[] lives, uint256[] deads, uint256[] times)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetConditionsState() (struct {
	Conds [][32]byte
	Lives []*big.Int
	Deads []*big.Int
	Times []*big.Int
}, error) {
	return _Conditionalstarrelease.Contract.GetConditionsState(&_Conditionalstarrelease.CallOpts)
}

// GetConditionsState is a free data retrieval call binding the contract method 0xc59f3a7c.
//
// Solidity: function getConditionsState() view returns(bytes32[] conds, uint256[] lives, uint256[] deads, uint256[] times)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetConditionsState() (struct {
	Conds [][32]byte
	Lives []*big.Int
	Deads []*big.Int
	Times []*big.Int
}, error) {
	return _Conditionalstarrelease.Contract.GetConditionsState(&_Conditionalstarrelease.CallOpts)
}

// GetForfeited is a free data retrieval call binding the contract method 0x4965fc89.
//
// Solidity: function getForfeited(address _participant) view returns(bool[] forfeited)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetForfeited(opts *bind.CallOpts, _participant common.Address) ([]bool, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getForfeited", _participant)

	if err != nil {
		return *new([]bool), err
	}

	out0 := *abi.ConvertType(out[0], new([]bool)).(*[]bool)

	return out0, err

}

// GetForfeited is a free data retrieval call binding the contract method 0x4965fc89.
//
// Solidity: function getForfeited(address _participant) view returns(bool[] forfeited)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetForfeited(_participant common.Address) ([]bool, error) {
	return _Conditionalstarrelease.Contract.GetForfeited(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetForfeited is a free data retrieval call binding the contract method 0x4965fc89.
//
// Solidity: function getForfeited(address _participant) view returns(bool[] forfeited)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetForfeited(_participant common.Address) ([]bool, error) {
	return _Conditionalstarrelease.Contract.GetForfeited(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetRemainingStars is a free data retrieval call binding the contract method 0x77bffc9a.
//
// Solidity: function getRemainingStars(address _participant) view returns(uint16[] stars)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetRemainingStars(opts *bind.CallOpts, _participant common.Address) ([]uint16, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getRemainingStars", _participant)

	if err != nil {
		return *new([]uint16), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint16)).(*[]uint16)

	return out0, err

}

// GetRemainingStars is a free data retrieval call binding the contract method 0x77bffc9a.
//
// Solidity: function getRemainingStars(address _participant) view returns(uint16[] stars)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetRemainingStars(_participant common.Address) ([]uint16, error) {
	return _Conditionalstarrelease.Contract.GetRemainingStars(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetRemainingStars is a free data retrieval call binding the contract method 0x77bffc9a.
//
// Solidity: function getRemainingStars(address _participant) view returns(uint16[] stars)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetRemainingStars(_participant common.Address) ([]uint16, error) {
	return _Conditionalstarrelease.Contract.GetRemainingStars(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetWithdrawn is a free data retrieval call binding the contract method 0xae66d948.
//
// Solidity: function getWithdrawn(address _participant) view returns(uint16[] withdrawn)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetWithdrawn(opts *bind.CallOpts, _participant common.Address) ([]uint16, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getWithdrawn", _participant)

	if err != nil {
		return *new([]uint16), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint16)).(*[]uint16)

	return out0, err

}

// GetWithdrawn is a free data retrieval call binding the contract method 0xae66d948.
//
// Solidity: function getWithdrawn(address _participant) view returns(uint16[] withdrawn)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetWithdrawn(_participant common.Address) ([]uint16, error) {
	return _Conditionalstarrelease.Contract.GetWithdrawn(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetWithdrawn is a free data retrieval call binding the contract method 0xae66d948.
//
// Solidity: function getWithdrawn(address _participant) view returns(uint16[] withdrawn)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetWithdrawn(_participant common.Address) ([]uint16, error) {
	return _Conditionalstarrelease.Contract.GetWithdrawn(&_Conditionalstarrelease.CallOpts, _participant)
}

// GetWithdrawnFromBatch is a free data retrieval call binding the contract method 0x206d0125.
//
// Solidity: function getWithdrawnFromBatch(address _participant, uint8 _batch) view returns(uint16 withdrawn)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) GetWithdrawnFromBatch(opts *bind.CallOpts, _participant common.Address, _batch uint8) (uint16, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "getWithdrawnFromBatch", _participant, _batch)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetWithdrawnFromBatch is a free data retrieval call binding the contract method 0x206d0125.
//
// Solidity: function getWithdrawnFromBatch(address _participant, uint8 _batch) view returns(uint16 withdrawn)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) GetWithdrawnFromBatch(_participant common.Address, _batch uint8) (uint16, error) {
	return _Conditionalstarrelease.Contract.GetWithdrawnFromBatch(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// GetWithdrawnFromBatch is a free data retrieval call binding the contract method 0x206d0125.
//
// Solidity: function getWithdrawnFromBatch(address _participant, uint8 _batch) view returns(uint16 withdrawn)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) GetWithdrawnFromBatch(_participant common.Address, _batch uint8) (uint16, error) {
	return _Conditionalstarrelease.Contract.GetWithdrawnFromBatch(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// HasForfeitedBatch is a free data retrieval call binding the contract method 0xa18f43ef.
//
// Solidity: function hasForfeitedBatch(address _participant, uint8 _batch) view returns(bool forfeited)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) HasForfeitedBatch(opts *bind.CallOpts, _participant common.Address, _batch uint8) (bool, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "hasForfeitedBatch", _participant, _batch)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasForfeitedBatch is a free data retrieval call binding the contract method 0xa18f43ef.
//
// Solidity: function hasForfeitedBatch(address _participant, uint8 _batch) view returns(bool forfeited)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) HasForfeitedBatch(_participant common.Address, _batch uint8) (bool, error) {
	return _Conditionalstarrelease.Contract.HasForfeitedBatch(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// HasForfeitedBatch is a free data retrieval call binding the contract method 0xa18f43ef.
//
// Solidity: function hasForfeitedBatch(address _participant, uint8 _batch) view returns(bool forfeited)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) HasForfeitedBatch(_participant common.Address, _batch uint8) (bool, error) {
	return _Conditionalstarrelease.Contract.HasForfeitedBatch(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// Livelines is a free data retrieval call binding the contract method 0x9fecff0d.
//
// Solidity: function livelines(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Livelines(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "livelines", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Livelines is a free data retrieval call binding the contract method 0x9fecff0d.
//
// Solidity: function livelines(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Livelines(arg0 *big.Int) (*big.Int, error) {
	return _Conditionalstarrelease.Contract.Livelines(&_Conditionalstarrelease.CallOpts, arg0)
}

// Livelines is a free data retrieval call binding the contract method 0x9fecff0d.
//
// Solidity: function livelines(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Livelines(arg0 *big.Int) (*big.Int, error) {
	return _Conditionalstarrelease.Contract.Livelines(&_Conditionalstarrelease.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Owner() (common.Address, error) {
	return _Conditionalstarrelease.Contract.Owner(&_Conditionalstarrelease.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Owner() (common.Address, error) {
	return _Conditionalstarrelease.Contract.Owner(&_Conditionalstarrelease.CallOpts)
}

// Timestamps is a free data retrieval call binding the contract method 0x8bc33af3.
//
// Solidity: function timestamps(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) Timestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "timestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Timestamps is a free data retrieval call binding the contract method 0x8bc33af3.
//
// Solidity: function timestamps(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Timestamps(arg0 *big.Int) (*big.Int, error) {
	return _Conditionalstarrelease.Contract.Timestamps(&_Conditionalstarrelease.CallOpts, arg0)
}

// Timestamps is a free data retrieval call binding the contract method 0x8bc33af3.
//
// Solidity: function timestamps(uint256 ) view returns(uint256)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) Timestamps(arg0 *big.Int) (*big.Int, error) {
	return _Conditionalstarrelease.Contract.Timestamps(&_Conditionalstarrelease.CallOpts, arg0)
}

// VerifyBalance is a free data retrieval call binding the contract method 0xa00ddad1.
//
// Solidity: function verifyBalance(address _participant) view returns(bool correct)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) VerifyBalance(opts *bind.CallOpts, _participant common.Address) (bool, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "verifyBalance", _participant)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBalance is a free data retrieval call binding the contract method 0xa00ddad1.
//
// Solidity: function verifyBalance(address _participant) view returns(bool correct)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) VerifyBalance(_participant common.Address) (bool, error) {
	return _Conditionalstarrelease.Contract.VerifyBalance(&_Conditionalstarrelease.CallOpts, _participant)
}

// VerifyBalance is a free data retrieval call binding the contract method 0xa00ddad1.
//
// Solidity: function verifyBalance(address _participant) view returns(bool correct)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) VerifyBalance(_participant common.Address) (bool, error) {
	return _Conditionalstarrelease.Contract.VerifyBalance(&_Conditionalstarrelease.CallOpts, _participant)
}

// WithdrawLimit is a free data retrieval call binding the contract method 0xe037a71c.
//
// Solidity: function withdrawLimit(address _participant, uint8 _batch) view returns(uint16 limit)
func (_Conditionalstarrelease *ConditionalstarreleaseCaller) WithdrawLimit(opts *bind.CallOpts, _participant common.Address, _batch uint8) (uint16, error) {
	var out []interface{}
	err := _Conditionalstarrelease.contract.Call(opts, &out, "withdrawLimit", _participant, _batch)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// WithdrawLimit is a free data retrieval call binding the contract method 0xe037a71c.
//
// Solidity: function withdrawLimit(address _participant, uint8 _batch) view returns(uint16 limit)
func (_Conditionalstarrelease *ConditionalstarreleaseSession) WithdrawLimit(_participant common.Address, _batch uint8) (uint16, error) {
	return _Conditionalstarrelease.Contract.WithdrawLimit(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// WithdrawLimit is a free data retrieval call binding the contract method 0xe037a71c.
//
// Solidity: function withdrawLimit(address _participant, uint8 _batch) view returns(uint16 limit)
func (_Conditionalstarrelease *ConditionalstarreleaseCallerSession) WithdrawLimit(_participant common.Address, _batch uint8) (uint16, error) {
	return _Conditionalstarrelease.Contract.WithdrawLimit(&_Conditionalstarrelease.CallOpts, _participant, _batch)
}

// AnalyzeCondition is a paid mutator transaction binding the contract method 0xdf6b1ebb.
//
// Solidity: function analyzeCondition(uint8 _condition) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) AnalyzeCondition(opts *bind.TransactOpts, _condition uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "analyzeCondition", _condition)
}

// AnalyzeCondition is a paid mutator transaction binding the contract method 0xdf6b1ebb.
//
// Solidity: function analyzeCondition(uint8 _condition) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) AnalyzeCondition(_condition uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.AnalyzeCondition(&_Conditionalstarrelease.TransactOpts, _condition)
}

// AnalyzeCondition is a paid mutator transaction binding the contract method 0xdf6b1ebb.
//
// Solidity: function analyzeCondition(uint8 _condition) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) AnalyzeCondition(_condition uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.AnalyzeCondition(&_Conditionalstarrelease.TransactOpts, _condition)
}

// ApproveCommitmentTransfer is a paid mutator transaction binding the contract method 0xd1555f1f.
//
// Solidity: function approveCommitmentTransfer(address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) ApproveCommitmentTransfer(opts *bind.TransactOpts, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "approveCommitmentTransfer", _to)
}

// ApproveCommitmentTransfer is a paid mutator transaction binding the contract method 0xd1555f1f.
//
// Solidity: function approveCommitmentTransfer(address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) ApproveCommitmentTransfer(_to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.ApproveCommitmentTransfer(&_Conditionalstarrelease.TransactOpts, _to)
}

// ApproveCommitmentTransfer is a paid mutator transaction binding the contract method 0xd1555f1f.
//
// Solidity: function approveCommitmentTransfer(address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) ApproveCommitmentTransfer(_to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.ApproveCommitmentTransfer(&_Conditionalstarrelease.TransactOpts, _to)
}

// Deposit is a paid mutator transaction binding the contract method 0xe6deefa9.
//
// Solidity: function deposit(address _participant, uint16 _star) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) Deposit(opts *bind.TransactOpts, _participant common.Address, _star uint16) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "deposit", _participant, _star)
}

// Deposit is a paid mutator transaction binding the contract method 0xe6deefa9.
//
// Solidity: function deposit(address _participant, uint16 _star) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Deposit(_participant common.Address, _star uint16) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Deposit(&_Conditionalstarrelease.TransactOpts, _participant, _star)
}

// Deposit is a paid mutator transaction binding the contract method 0xe6deefa9.
//
// Solidity: function deposit(address _participant, uint16 _star) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) Deposit(_participant common.Address, _star uint16) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Deposit(&_Conditionalstarrelease.TransactOpts, _participant, _star)
}

// Forfeit is a paid mutator transaction binding the contract method 0xaa366290.
//
// Solidity: function forfeit(uint8 _batch) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) Forfeit(opts *bind.TransactOpts, _batch uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "forfeit", _batch)
}

// Forfeit is a paid mutator transaction binding the contract method 0xaa366290.
//
// Solidity: function forfeit(uint8 _batch) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Forfeit(_batch uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Forfeit(&_Conditionalstarrelease.TransactOpts, _batch)
}

// Forfeit is a paid mutator transaction binding the contract method 0xaa366290.
//
// Solidity: function forfeit(uint8 _batch) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) Forfeit(_batch uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Forfeit(&_Conditionalstarrelease.TransactOpts, _batch)
}

// Register is a paid mutator transaction binding the contract method 0xe182914e.
//
// Solidity: function register(address _participant, uint16[] _batches, uint16 _rate, uint256 _rateUnit) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) Register(opts *bind.TransactOpts, _participant common.Address, _batches []uint16, _rate uint16, _rateUnit *big.Int) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "register", _participant, _batches, _rate, _rateUnit)
}

// Register is a paid mutator transaction binding the contract method 0xe182914e.
//
// Solidity: function register(address _participant, uint16[] _batches, uint16 _rate, uint256 _rateUnit) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Register(_participant common.Address, _batches []uint16, _rate uint16, _rateUnit *big.Int) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Register(&_Conditionalstarrelease.TransactOpts, _participant, _batches, _rate, _rateUnit)
}

// Register is a paid mutator transaction binding the contract method 0xe182914e.
//
// Solidity: function register(address _participant, uint16[] _batches, uint16 _rate, uint256 _rateUnit) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) Register(_participant common.Address, _batches []uint16, _rate uint16, _rateUnit *big.Int) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Register(&_Conditionalstarrelease.TransactOpts, _participant, _batches, _rate, _rateUnit)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) RenounceOwnership() (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.RenounceOwnership(&_Conditionalstarrelease.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.RenounceOwnership(&_Conditionalstarrelease.TransactOpts)
}

// TransferCommitment is a paid mutator transaction binding the contract method 0x339ff96d.
//
// Solidity: function transferCommitment(address _from) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) TransferCommitment(opts *bind.TransactOpts, _from common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "transferCommitment", _from)
}

// TransferCommitment is a paid mutator transaction binding the contract method 0x339ff96d.
//
// Solidity: function transferCommitment(address _from) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) TransferCommitment(_from common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.TransferCommitment(&_Conditionalstarrelease.TransactOpts, _from)
}

// TransferCommitment is a paid mutator transaction binding the contract method 0x339ff96d.
//
// Solidity: function transferCommitment(address _from) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) TransferCommitment(_from common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.TransferCommitment(&_Conditionalstarrelease.TransactOpts, _from)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.TransferOwnership(&_Conditionalstarrelease.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address _newOwner) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.TransferOwnership(&_Conditionalstarrelease.TransactOpts, _newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0xdd6ad764.
//
// Solidity: function withdraw(uint8 _batch, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) Withdraw(opts *bind.TransactOpts, _batch uint8, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "withdraw", _batch, _to)
}

// Withdraw is a paid mutator transaction binding the contract method 0xdd6ad764.
//
// Solidity: function withdraw(uint8 _batch, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) Withdraw(_batch uint8, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Withdraw(&_Conditionalstarrelease.TransactOpts, _batch, _to)
}

// Withdraw is a paid mutator transaction binding the contract method 0xdd6ad764.
//
// Solidity: function withdraw(uint8 _batch, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) Withdraw(_batch uint8, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.Withdraw(&_Conditionalstarrelease.TransactOpts, _batch, _to)
}

// WithdrawForfeited is a paid mutator transaction binding the contract method 0xc2832430.
//
// Solidity: function withdrawForfeited(address _participant, uint8 _batch, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) WithdrawForfeited(opts *bind.TransactOpts, _participant common.Address, _batch uint8, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "withdrawForfeited", _participant, _batch, _to)
}

// WithdrawForfeited is a paid mutator transaction binding the contract method 0xc2832430.
//
// Solidity: function withdrawForfeited(address _participant, uint8 _batch, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) WithdrawForfeited(_participant common.Address, _batch uint8, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.WithdrawForfeited(&_Conditionalstarrelease.TransactOpts, _participant, _batch, _to)
}

// WithdrawForfeited is a paid mutator transaction binding the contract method 0xc2832430.
//
// Solidity: function withdrawForfeited(address _participant, uint8 _batch, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) WithdrawForfeited(_participant common.Address, _batch uint8, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.WithdrawForfeited(&_Conditionalstarrelease.TransactOpts, _participant, _batch, _to)
}

// WithdrawOverdue is a paid mutator transaction binding the contract method 0x9882e15e.
//
// Solidity: function withdrawOverdue(address _participant, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) WithdrawOverdue(opts *bind.TransactOpts, _participant common.Address, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "withdrawOverdue", _participant, _to)
}

// WithdrawOverdue is a paid mutator transaction binding the contract method 0x9882e15e.
//
// Solidity: function withdrawOverdue(address _participant, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) WithdrawOverdue(_participant common.Address, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.WithdrawOverdue(&_Conditionalstarrelease.TransactOpts, _participant, _to)
}

// WithdrawOverdue is a paid mutator transaction binding the contract method 0x9882e15e.
//
// Solidity: function withdrawOverdue(address _participant, address _to) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) WithdrawOverdue(_participant common.Address, _to common.Address) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.WithdrawOverdue(&_Conditionalstarrelease.TransactOpts, _participant, _to)
}

// WithdrawToSelf is a paid mutator transaction binding the contract method 0x2cbb827f.
//
// Solidity: function withdrawToSelf(uint8 _batch) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactor) WithdrawToSelf(opts *bind.TransactOpts, _batch uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.contract.Transact(opts, "withdrawToSelf", _batch)
}

// WithdrawToSelf is a paid mutator transaction binding the contract method 0x2cbb827f.
//
// Solidity: function withdrawToSelf(uint8 _batch) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseSession) WithdrawToSelf(_batch uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.WithdrawToSelf(&_Conditionalstarrelease.TransactOpts, _batch)
}

// WithdrawToSelf is a paid mutator transaction binding the contract method 0x2cbb827f.
//
// Solidity: function withdrawToSelf(uint8 _batch) returns()
func (_Conditionalstarrelease *ConditionalstarreleaseTransactorSession) WithdrawToSelf(_batch uint8) (*types.Transaction, error) {
	return _Conditionalstarrelease.Contract.WithdrawToSelf(&_Conditionalstarrelease.TransactOpts, _batch)
}

// ConditionalstarreleaseConditionCompletedIterator is returned from FilterConditionCompleted and is used to iterate over the raw logs and unpacked data for ConditionCompleted events raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseConditionCompletedIterator struct {
	Event *ConditionalstarreleaseConditionCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConditionalstarreleaseConditionCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConditionalstarreleaseConditionCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConditionalstarreleaseConditionCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConditionalstarreleaseConditionCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConditionalstarreleaseConditionCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConditionalstarreleaseConditionCompleted represents a ConditionCompleted event raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseConditionCompleted struct {
	Condition uint8
	When      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConditionCompleted is a free log retrieval operation binding the contract event 0x78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413.
//
// Solidity: event ConditionCompleted(uint8 indexed condition, uint256 when)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) FilterConditionCompleted(opts *bind.FilterOpts, condition []uint8) (*ConditionalstarreleaseConditionCompletedIterator, error) {

	var conditionRule []interface{}
	for _, conditionItem := range condition {
		conditionRule = append(conditionRule, conditionItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.FilterLogs(opts, "ConditionCompleted", conditionRule)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseConditionCompletedIterator{contract: _Conditionalstarrelease.contract, event: "ConditionCompleted", logs: logs, sub: sub}, nil
}

// WatchConditionCompleted is a free log subscription operation binding the contract event 0x78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413.
//
// Solidity: event ConditionCompleted(uint8 indexed condition, uint256 when)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) WatchConditionCompleted(opts *bind.WatchOpts, sink chan<- *ConditionalstarreleaseConditionCompleted, condition []uint8) (event.Subscription, error) {

	var conditionRule []interface{}
	for _, conditionItem := range condition {
		conditionRule = append(conditionRule, conditionItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.WatchLogs(opts, "ConditionCompleted", conditionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConditionalstarreleaseConditionCompleted)
				if err := _Conditionalstarrelease.contract.UnpackLog(event, "ConditionCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConditionCompleted is a log parse operation binding the contract event 0x78435870b8845d56a5d049c437c2b4ab348923ca2f0b3836c89b8ca4702ff413.
//
// Solidity: event ConditionCompleted(uint8 indexed condition, uint256 when)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) ParseConditionCompleted(log types.Log) (*ConditionalstarreleaseConditionCompleted, error) {
	event := new(ConditionalstarreleaseConditionCompleted)
	if err := _Conditionalstarrelease.contract.UnpackLog(event, "ConditionCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ConditionalstarreleaseForfeitIterator is returned from FilterForfeit and is used to iterate over the raw logs and unpacked data for Forfeit events raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseForfeitIterator struct {
	Event *ConditionalstarreleaseForfeit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConditionalstarreleaseForfeitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConditionalstarreleaseForfeit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConditionalstarreleaseForfeit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConditionalstarreleaseForfeitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConditionalstarreleaseForfeitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConditionalstarreleaseForfeit represents a Forfeit event raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseForfeit struct {
	Who   common.Address
	Batch uint8
	Stars uint16
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterForfeit is a free log retrieval operation binding the contract event 0x56c9e0779f8410252ac7271778bfca64f4e74461b51d7abe02e74f80ac30abaa.
//
// Solidity: event Forfeit(address indexed who, uint8 batch, uint16 stars)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) FilterForfeit(opts *bind.FilterOpts, who []common.Address) (*ConditionalstarreleaseForfeitIterator, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.FilterLogs(opts, "Forfeit", whoRule)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseForfeitIterator{contract: _Conditionalstarrelease.contract, event: "Forfeit", logs: logs, sub: sub}, nil
}

// WatchForfeit is a free log subscription operation binding the contract event 0x56c9e0779f8410252ac7271778bfca64f4e74461b51d7abe02e74f80ac30abaa.
//
// Solidity: event Forfeit(address indexed who, uint8 batch, uint16 stars)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) WatchForfeit(opts *bind.WatchOpts, sink chan<- *ConditionalstarreleaseForfeit, who []common.Address) (event.Subscription, error) {

	var whoRule []interface{}
	for _, whoItem := range who {
		whoRule = append(whoRule, whoItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.WatchLogs(opts, "Forfeit", whoRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConditionalstarreleaseForfeit)
				if err := _Conditionalstarrelease.contract.UnpackLog(event, "Forfeit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseForfeit is a log parse operation binding the contract event 0x56c9e0779f8410252ac7271778bfca64f4e74461b51d7abe02e74f80ac30abaa.
//
// Solidity: event Forfeit(address indexed who, uint8 batch, uint16 stars)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) ParseForfeit(log types.Log) (*ConditionalstarreleaseForfeit, error) {
	event := new(ConditionalstarreleaseForfeit)
	if err := _Conditionalstarrelease.contract.UnpackLog(event, "Forfeit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ConditionalstarreleaseOwnershipRenouncedIterator is returned from FilterOwnershipRenounced and is used to iterate over the raw logs and unpacked data for OwnershipRenounced events raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseOwnershipRenouncedIterator struct {
	Event *ConditionalstarreleaseOwnershipRenounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConditionalstarreleaseOwnershipRenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConditionalstarreleaseOwnershipRenounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConditionalstarreleaseOwnershipRenounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConditionalstarreleaseOwnershipRenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConditionalstarreleaseOwnershipRenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConditionalstarreleaseOwnershipRenounced represents a OwnershipRenounced event raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseOwnershipRenounced struct {
	PreviousOwner common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipRenounced is a free log retrieval operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: event OwnershipRenounced(address indexed previousOwner)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) FilterOwnershipRenounced(opts *bind.FilterOpts, previousOwner []common.Address) (*ConditionalstarreleaseOwnershipRenouncedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.FilterLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseOwnershipRenouncedIterator{contract: _Conditionalstarrelease.contract, event: "OwnershipRenounced", logs: logs, sub: sub}, nil
}

// WatchOwnershipRenounced is a free log subscription operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: event OwnershipRenounced(address indexed previousOwner)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) WatchOwnershipRenounced(opts *bind.WatchOpts, sink chan<- *ConditionalstarreleaseOwnershipRenounced, previousOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.WatchLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConditionalstarreleaseOwnershipRenounced)
				if err := _Conditionalstarrelease.contract.UnpackLog(event, "OwnershipRenounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipRenounced is a log parse operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: event OwnershipRenounced(address indexed previousOwner)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) ParseOwnershipRenounced(log types.Log) (*ConditionalstarreleaseOwnershipRenounced, error) {
	event := new(ConditionalstarreleaseOwnershipRenounced)
	if err := _Conditionalstarrelease.contract.UnpackLog(event, "OwnershipRenounced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ConditionalstarreleaseOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseOwnershipTransferredIterator struct {
	Event *ConditionalstarreleaseOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ConditionalstarreleaseOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ConditionalstarreleaseOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ConditionalstarreleaseOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ConditionalstarreleaseOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ConditionalstarreleaseOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ConditionalstarreleaseOwnershipTransferred represents a OwnershipTransferred event raised by the Conditionalstarrelease contract.
type ConditionalstarreleaseOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ConditionalstarreleaseOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ConditionalstarreleaseOwnershipTransferredIterator{contract: _Conditionalstarrelease.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ConditionalstarreleaseOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Conditionalstarrelease.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ConditionalstarreleaseOwnershipTransferred)
				if err := _Conditionalstarrelease.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Conditionalstarrelease *ConditionalstarreleaseFilterer) ParseOwnershipTransferred(log types.Log) (*ConditionalstarreleaseOwnershipTransferred, error) {
	event := new(ConditionalstarreleaseOwnershipTransferred)
	if err := _Conditionalstarrelease.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
